#!/usr/bin/env python
"""This module brings together and exports target/disease evidence generated by AzGeneBurden.py, GenebassGeneBurden.py, and CuratedGeneBurden.py."""

import argparse
from functools import partial, reduce
import logging

from pyspark.sql import SparkSession
from pyspark.sql.dataframe import DataFrame

from common.evidence import initialize_sparksession, write_evidence_strings_tsv
from AzGeneBurden import main as process_az_gene_burden
from GenebassGeneBurden import main as process_genebass_gene_burden
from FinngenGeneBurden import main as process_finngen_gene_burden
from CuratedGeneBurden import main as process_curated_gene_burden

def main(
    spark: SparkSession,
    az_binary_data: str,
    az_quant_data: str,
    az_genes_links: str,
    az_phenotypes_links: str,
    curated_data: str,
    genebass_data: str,
    finngen_data: str,
    finngen_manifest: str,
) -> DataFrame:
    """This module brings together and exports target/disease evidence generated by AzGeneBurden.py, GenebassGeneBurden.py, and CuratedGeneBurden.py."""

    burden_evidence_sets = [
        # Generate evidence from AZ data:
        process_az_gene_burden(spark, az_binary_data, az_quant_data, az_genes_links, az_phenotypes_links).persist(),
        # Generate evidence from Curated data:
        process_curated_gene_burden(spark, curated_data),
        # Generate evidence from Genebass data:
        process_genebass_gene_burden(spark, genebass_data),
        # Generate evidence from Finngen data:
        process_finngen_gene_burden(spark, finngen_data, finngen_manifest)
    ]

    unionByDiffSchema = partial(DataFrame.unionByName, allowMissingColumns=True)
    evd_df = reduce(unionByDiffSchema, burden_evidence_sets).distinct()
    logging.info(f'Total number of gene_burden evidence: {evd_df.count()}')

    return evd_df


def get_parser():
    """Get parser object for script GeneBurden.py."""
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        '--az_binary_data',
        help='Input parquet files with AZ\'s PheWAS associations of binary traits.',
        type=str,
        required=True,
    )
    parser.add_argument(
        '--az_quant_data',
        help='Input parquet files with AZ\'s PheWAS associations of quantitative traits.',
        type=str,
        required=True,
    )
    parser.add_argument(
        "--az_genes_links",
        help="Input CSV file that consists of a look up table between a gene and its link in the AZ Phewas Portal.",
        type=str,
        required=True,
    )
    parser.add_argument(
        "--az_phenotypes_links",
        help="Input CSV file that consists of a look up table between a phenotype and its link in the AZ Phewas Portal.",
        type=str,
        required=True,
    )
    parser.add_argument(
        '--curated_data',
        help='Input remote TSV file containing the gene burden manual curation.',
        type=str,
        required=True,
    )
    parser.add_argument(
        '--genebass_data',
        help='Input parquet files with Genebass\'s burden associations.',
        type=str,
        required=True,
    )
    parser.add_argument(
        '--finngen_data',
        help='Input tab delimited table containing all Finngen\'s burden tests.',
        type=str,
        required=True,
    )
    parser.add_argument(
        '--finngen_manifest',
        help='Input JSON file with Finngen\'s traits manifest.',
        type=str,
        required=True,
    )
    parser.add_argument(
        '--output',
        help='Output TSV file following the gene_burden evidence data model.',
        type=str,
        required=True,
    )

    return parser

if __name__ == "__main__":
    args = get_parser().parse_args()

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s %(levelname)s %(module)s - %(funcName)s: %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
    )

    spark = initialize_sparksession()

    evd_df = main(
        spark=spark,
        az_binary_data=args.az_binary_data,
        az_quant_data=args.az_quant_data,
        az_genes_links=args.az_genes_links,
        az_phenotypes_links=args.az_phenotypes_links,
        curated_data=args.curated_data,
        genebass_data=args.genebass_data,
        finngen_data=args.finngen_data,
        finngen_manifest=args.finngen_manifest,
    )

    write_evidence_strings_tsv(evd_df, args.output)
    logging.info(f'Evidence strings have been saved to {args.output}. Exiting.')